class Solution {
    
    List<List<String>> result = new ArrayList<>();
    int wordLen;
    class TrieNode{
        List<String> startsWith;
        TrieNode[] children;
        
        TrieNode(){
            startsWith = new ArrayList<>();
            children = new TrieNode[26];
        }
        
    }
    
    TrieNode root;
    public void insert(String word){
       
        TrieNode curr = root;
        for(int i = 0; i < word.length(); i++){
            char ch = word.charAt(i);
            if(curr.children[ch - 'a'] == null)
                curr.children[ch - 'a'] = new TrieNode();
            
            curr = curr.children[ch - 'a'];
            curr.startsWith.add(word);
                
        }
    }
    
    public List<String> beginsWith(String word){
        TrieNode curr = root;
         for(int i = 0; i < word.length(); i++){
              char ch = word.charAt(i);
              if(curr.children[ch - 'a'] == null)
                  return new ArrayList<>();
             curr = curr.children[ch - 'a'];
         }
        return curr.startsWith;
    }
    
    public List<List<String>> wordSquares(String[] words) {
        
        root = new TrieNode();
        wordLen = words[0].length();
        for(String word: words)
            insert(word);
        
        List<String> li = new ArrayList<>();
        for(String word: words){
            
            //action
            li.add(word);
            
            //backtrack
            backtrack(li);
            
            //recurse
            li.remove(li.size() - 1);
        }
          return result;  
    }
    
    private void backtrack(List<String> li){
        
        //base case
        if(li.size() == wordLen){
            result.add(new ArrayList<>(li));
            return;
        }
            
        
        StringBuilder sb = new StringBuilder();
        int len = li.size();
        for(String s : li)
            sb.append(s.charAt(len));
        
        List<String> startsWithList = beginsWith(sb.toString());
        for(String word : startsWithList){
            li.add(word);
            backtrack(li);
            li.remove(li.size() - 1);
        }
            
    }
}