//TimeComplexity.    O(26^k). k = length of the word
//SpaceComplexity.   O(1)

class Solution {

    class TrieNode{
            TrieNode[] children;
            List<String> startsWith;

            public TrieNode(){
                children = new TrieNode[26];
                startsWith = new ArrayList<>();
            }
        }

            TrieNode root;

            public void insert(String word){
                TrieNode curr = root;

            for(int i = 0; i < word.length(); i++){
                char c = word.charAt(i);
                if(curr.children[c-'a'] == null){
                    curr.children[c-'a'] = new TrieNode();
                }
                curr = curr.children[c-'a'];
                curr.startsWith.add(word);
            }
            }

            public List<String> startWith(String word){
                 TrieNode curr = root;
                  for(int i = 0; i < word.length(); i++){
                 char c = word.charAt(i);
                if(curr.children[c-'a'] == null){
                   return new ArrayList<>();
                }
                 curr = curr.children[c-'a'];
                  }
               
                return curr.startsWith;
            }

    List<List<String>> result;
    public List<List<String>> wordSquares(String[] words) {
        
        result = new ArrayList<>();
        if(words.length == 0)return result;
        root = new TrieNode();
        for(String word : words){
            insert(word);
        }

        List<String> temp = new ArrayList<>();

        for(String word: words){
            //action
                temp.add(word);
            //recurse
                backtrack(temp,word.length());
            //backtrack

            temp.remove(temp.size()-1);
        }
        return result;


    }

    public void  backtrack(List<String> temp,int n){
        //base

        if(temp.size() == n)
        {
        result.add(new ArrayList<>(temp));
        return;

        }

        //logic
        StringBuilder prefix = new StringBuilder();
        for(String word: temp){
      
            prefix.append(word.charAt(temp.size()));

        }
        List<String> list = startWith(prefix.toString());
        for(String word: list){
            //action
            temp.add(word);
            //recurse
            backtrack(temp,n);
            //backtrack
            temp.remove(temp.size()-1);
        }
        }
        
    }
